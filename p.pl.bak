merge(A::SubType1, A::SubType2, A::R):-
	nl,write(uno),
	merge(SubType1,SubType2,R).

merge(A::SubType1, B,[A::SubType1,B]):-
	nl,write(dos),
	atom(B),
	A\==B.

merge(A, B::SubType2,[A,B::SubType2]):-
	atom(A),
	A\==B.

merge(A::SubType1, B::SubType2,B::NewSubType):-
	nl,write(tres),
	A\==B,
	memberchk(A::Type,SubType2),
	merge(A::SubType1,A::Type,A::R),
	replace(A::_,A::R,SubType2,NewSubType).

merge(A::SubType1, B::SubType2,A::NewSubType):-
	nl,write(cuatro),
	A\==B,
	memberchk(B::Type,SubType1),
	merge(B::SubType2,B::Type,B::R),
	replace(B::_,B::R,SubType1,NewSubType).


merge([],T,T).
merge([Head|Tail],Type2,NewType):-
	nl,write(cinco),
	list(Type2),
	merge(Head,Type2,NewType1),
	merge(Tail,NewType1,NewType).

merge(A::SubType1, Type2,NewSubType):-
	nl,write(seis),
	list(Type2),
	memberchk(A::Type,Type2),
	merge(A::SubType1,A::Type,A::R),
	replace(A::_,A::R,Type2,NewSubType).

merge(A, Type2,NewSubType):-
	nl,write(siete),
	list(Type2),
	union(Type2,[A],NewSubType).


memberOf(Name,Type):- 
	atomicMemberOf(Name,Type).

memberOf(Name,Type):-
	complexMemberOf(Name,Type).


atomicMemberOf(Name,Name):- 
	atom(Name),
	\+list(Name).

atomicMemberOf(Name::SubType,Name::ComplexType):-
	\+list(SubType),
	atomicMemberOf(SubType,ComplexType).

atomicMemberOf(Name,[Type|_]):-
	\+list(Name),
	atomicMemberOf(Name,Type).

atomicMemberOf(Name,[_|Tail]):-
	\+list(Name),
	atomicMemberOf(Name,Tail).


complexMemberOf(Name,Name::_):-
	atom(Name).

complexMemberOf(Name::SubType,Name::ComplexType):-
	\+list(SubType),
	complexMemberOf(SubType,ComplexType).

complexMemberOf(Name,[Type|_]):-
	\+list(Name),
	complexMemberOf(Name,Type).

complexMemberOf(Name,[_|Tail]):-
	\+list(Name),
	complexMemberOf(Name,Tail).


